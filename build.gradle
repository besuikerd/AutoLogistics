import org.ajoberstar.grgit.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:grgit:1.3.0'
    }
}

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }

    ivy {
        name "CoFHLib"
        artifactPattern "http://addons-origin.cursecdn.com/files/2243/944/[module]-[revision].[ext]"
    }
    ivy {
        name "CoFHCore"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2243/947/[module]-[revision].[ext]'
    }
    ivy {
        name "ThermalExpansion"
        artifactPattern "http://addons-origin.cursecdn.com/files/2233/797/[module]-[revision].[ext]"
    }
    ivy {
        name "ThermalFoundation"
        artifactPattern "http://addons-origin.cursecdn.com/files/2243/149/[module]-[revision].[ext]"
    }
}

apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'forge'


version = "0.0.1"
group= "com.besuikerd.autologistics"
archivesBaseName = "AutoLogistics"

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = "minecraft"
}

configurations.create('mod')
configurations.mod {
    description = 'mod dependencies'
    transitive = true
}

def gitDependencyPath = 'lib'
def String[] gitDependencies = []

String getRepoName(String uri){
    uri.replaceAll('^(.*/)+|\\.git', '')
}


dependencies {
    compile "codechicken:CodeChickenCore:1.7.10-1.0.4.29:src"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.3.74:src"
    mod "codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev"
    mod "codechicken:NotEnoughItems:1.7.10-1.0.3.74:dev"

    compile group: 'cofh', name: 'CoFHLib', version: '[1.7.10]1.0.3B1-164-dev', ext: 'jar'
    compile group: 'cofh', name: 'CoFHCore', version: '[1.7.10]3.0.2-284-dev', ext: 'jar'
    compile group: 'cofh', name: 'ThermalExpansion', version: '[1.7.10]4.0.0-176-dev', ext: 'jar'
    compile group: 'cofh', name: 'ThermalFoundation', version: '[1.7.10]1.0.0-88-dev', ext: 'jar'

    testCompile 'org.scalatest:scalatest_2.11:2.2.5'
    testCompile 'junit:junit:4.12'
}

task cloneGitDependencies << {
    gitDependencies.each {
        def repo = getRepoName(it)
        def destination = file("$gitDependencyPath/$repo")
        if(!destination.exists()){
            Grgit.clone(dir: destination, uri: it)
        }
    }
}

task cleanMods << {
    deleteMods.execute()
    copyMods.execute()
}

task deleteMods(type:Delete){
    delete fileTree("${minecraft.runDir}/mods").include('*')
}

task copyMods(type:Copy) {
    into "${minecraft.runDir}/mods/"
    from configurations.mod
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
